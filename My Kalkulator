import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  // ignore: no_logic_in_create_state
  State<StatefulWidget> createState() => throw UnimplementedError();
}

// ignore: unused_element
class _MyAppState extends State<MyApp> {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Kalkulator',
      home: Scaffold(
        appBar: AppBar(
          title: const Text('Kalkulator'),
        ),
        body: Container(),
      ),
    );
  }

  String _output = "0";
  void _buttonPressed(String buttonText) {
    setState(() {
      if (buttonText == "C") {
        _output = "0";
      } else if (buttonText == "+/-") {
        _output = (double.parse(_output) * -1).toString();
      } else if (buttonText == "%") {
        _output = (double.parse(_output) / 100).toString();
      } else if (buttonText == "=") {
        List<String> operations = _output.split(RegExp(r'[+\-x/]'));
        List<String> operators = _output.split(RegExp(r'[0-9]+'));

        double result = double.parse(operations[0]);

        for (int i = 0; i < operators.length; i++) {
          String operator = operators[i];
          double operand = double.parse(operations[i + 1]);

          if (operator == "+") {
            result += operand;
          } else if (operator == "-") {
            result -= operand;
          } else if (operator == "*") {
            result *= operand;
          } else if (operator == "/") {
            result /= operand;
          }
        }
        _output = result.toString();
      } else {
        if (_output == "0") {
          _output = buttonText;
        } else {
          _output += buttonText;
        }
      }
    });
  }

  // ignore: unused_element
  Widget _buildButton(String buttonText) {
    return Expanded(
      child: Padding(
        padding: const EdgeInsets.all(8.0),
        child: (
            {required EdgeInsets padding,
            required Text child,
            required void Function() onPressed}) {}(
          padding: const EdgeInsets.all(24.0),
          child: Text(
            buttonText,
            style: const TextStyle(
              fontSize: 24.0,
              fontWeight: FontWeight.bold,
            ),
          ),
          onPressed: () => _buttonPressed(buttonText),
        ),
      ),
    );
  }
}
